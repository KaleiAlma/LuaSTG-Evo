# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  # push:
  #   branches: [ "master" ]
  # pull_request:
  #   branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        # c_compiler: [gcc, clang, cl]
        # c_compiler: [clang, MSVC]
        # include:
          # - os: windows-latest
          #   c_compiler: MSVC
          #   cpp_compiler: MSVC
          # - os: ubuntu-latest
          #   c_compiler: gcc
          #   cpp_compiler: g++
          # - os: ubuntu-latest
          #   c_compiler: clang
          #   cpp_compiler: clang++
        # exclude:
          # - os: windows-latest
          #   c_compiler: gcc
          # - os: windows-latest
          #   c_compiler: clang
          # - os: ubuntu-latest
          #   c_compiler: MSVC

    steps:
    - run: echo ${{ runner.os }}

    - if: ${{ runner.os == 'Linux' }}
      run: sudo apt install ninja-build && sudo apt remove clang && sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
    - if: ${{ runner.os == 'Windows' }}
      run: choco install ninja

    # - if: ${{ runner.os == 'Linux' }}
    #   uses: KyleMayes/install-llvm-action@v2
    #   with:
    #     version: "17"
    
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Cache C++ packages
      id: cache-cpp
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/build/cpm-cache
        key: ${{ runner.os }}-cpm-${{ hashFiles('**/') }}
        restore-keys: |
          ${{ runner.os }}-cpm-
    #   path: |
    #     ${{ github.workspace }}/build/_deps
    #   key: cache-cpp-all
    #   restore-keys: |
    #     cache-cpp-all

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
      
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    - name: Configure CMake (Linux)
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=clang++
        -DCMAKE_C_COMPILER=clang
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -DCPM_SOURCE_CACHE=${{ github.workspace }}/build/cpm-cache
        -G Ninja
      if: ${{ runner.os == 'Linux' }}

    - name: Configure CMake (Windows)
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -DCPM_SOURCE_CACHE=${{ github.workspace }}/build/cpm-cache
        -G Ninja
      if: ${{ runner.os == 'Windows' }}
        

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target LuaSTG

    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --build-config ${{ matrix.build_type }}
    
    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bin
        path: |
          build/bin
        retention-days: 7
